using System;
using System.IO;
using System.Windows;
using UWUVCI_AIO_WPF.Helpers;

public static class DeflickerDitheringRemover
{
    private static readonly byte[] DeflickerPattern = {
        0x2C, 0x03, 0x00, 0x00, 0x41, 0x82, 0x00, 0xF8,
        0x89, 0x04, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
        0x89, 0x44, 0x00, 0x01, 0x38, 0x60, 0x00, 0x00,
        0x51, 0x00, 0x07, 0x3E, 0x88, 0xE4, 0x00, 0x06,
        0x51, 0x40, 0x26, 0x36, 0x89, 0x04, 0x00, 0x0C,
        0x50, 0xE3, 0x07, 0x3E, 0x38, 0xE0, 0x00, 0x00,
        0x51, 0x07, 0x07, 0x3E, 0x89, 0x44, 0x00, 0x0D,
        0x89, 0x64, 0x00, 0x07, 0x39, 0x00, 0x00, 0x00,
        0x51, 0x47, 0x26, 0x36, 0x89, 0x44, 0x00, 0x02,
        0x89, 0x24, 0x00, 0x12, 0x51, 0x63, 0x26, 0x36,
        0x51, 0x40, 0x45, 0x2E, 0x89, 0x44, 0x00, 0x0E,
        0x51, 0x28, 0x07, 0x3E, 0x89, 0x24, 0x00, 0x13,
        0x51, 0x47, 0x45, 0x2E, 0x89, 0x44, 0x00, 0x03,
        0x51, 0x28, 0x26, 0x36, 0x89, 0x24, 0x00, 0x14,
        0x51, 0x40, 0x64, 0x26, 0x89, 0x44, 0x00, 0x0F,
        0x51, 0x28, 0x45, 0x2E, 0x89, 0x24, 0x00, 0x15,
        0x51, 0x47, 0x64, 0x26, 0x89, 0x44, 0x00, 0x04,
        0x89, 0x64, 0x00, 0x08, 0x51, 0x28, 0x64, 0x26,
        0x51, 0x40, 0x83, 0x1E, 0x89, 0x44, 0x00, 0x10,
        0x89, 0x24, 0x00, 0x16, 0x51, 0x63, 0x45, 0x2E,
        0x89, 0x64, 0x00, 0x09, 0x51, 0x47, 0x83, 0x1E,
        0x89, 0x44, 0x00, 0x05, 0x51, 0x28, 0x83, 0x1E,
        0x89, 0x24, 0x00, 0x11, 0x51, 0x63, 0x64, 0x26,
        0x89, 0x64, 0x00, 0x0A, 0x51, 0x40, 0xA2, 0x16,
        0x89, 0x44, 0x00, 0x0B, 0x51, 0x27, 0xA2, 0x16,
        0x88, 0x84, 0x00, 0x17, 0x39, 0x20, 0x00, 0x01,
        0x51, 0x63, 0x83, 0x1E, 0x51, 0x43, 0xA2, 0x16,
        0x50, 0x88, 0xA2, 0x16, 0x51, 0x20, 0xC0, 0x0E,
        0x39, 0x40, 0x00, 0x02, 0x39, 0x20, 0x00, 0x03,
        0x38, 0x80, 0x00, 0x04, 0x51, 0x43, 0xC0, 0x0E,
        0x51, 0x27, 0xC0, 0x0E, 0x50, 0x88, 0xC0, 0x0E,
        0x48, 0x00, 0x00, 0x24, 0x3D, 0x00, 0x01, 0x66,
        0x3C, 0x60, 0x02, 0x66, 0x3C, 0xE0, 0x03, 0x66,
        0x3C, 0x80, 0x04, 0x66, 0x38, 0x08, 0x66, 0x66,
        0x38, 0x63, 0x66, 0x66, 0x38, 0xE7, 0x66, 0x66,
        0x39, 0x04, 0x66, 0x66, 0x3D, 0x20, 0xCC, 0x01,
        0x39, 0x40, 0x00, 0x61, 0x99, 0x49, 0x80, 0x00,
        0x2C, 0x05, 0x00, 0x00, 0x38, 0x80, 0x00, 0x53,
        0x39, 0x60, 0x00, 0x00, 0x90, 0x09, 0x80, 0x00,
        0x38, 0x00, 0x00, 0x54, 0x39, 0x80, 0x00, 0x00,
        0x50, 0x8B, 0xC0, 0x0E, 0x99, 0x49, 0x80, 0x00,
        0x50, 0x0C, 0xC0, 0x0E, 0x90, 0x69, 0x80, 0x00,
        0x99, 0x49, 0x80, 0x00, 0x90, 0xE9, 0x80, 0x00,
        0x99, 0x49, 0x80, 0x00, 0x91, 0x09, 0x80, 0x00,
        0x41, 0x82, 0x00, 0x40
    };

    private static readonly byte[] DeflickerReplacement = { 0x48, 0x00, 0x00, 0x40 };

    private static readonly byte[] DitheringPattern = {
        0x3C, 0x80, 0xCC, 0x01, 0x38, 0xA0, 0x00, 0x61,
        0x38, 0x00, 0x00, 0x00, 0x80, 0xC7, 0x02, 0x20,
        0x50, 0x66, 0x17, 0x7A, 0x98, 0xA4, 0x80, 0x00,
        0x90, 0xC4, 0x80, 0x00, 0x90, 0xC7, 0x02, 0x20,
        0xB0, 0x07, 0x00, 0x02, 0x4E, 0x80, 0x00, 0x20 };

    private static readonly byte[] DitheringReplacement = { 0x48, 0x00, 0x00, 0x28 };

    private static readonly byte[] VFilterPattern = { 0x08, 0x08, 0x0A, 0x0C, 0x0A, 0x08, 0x08 };
    private static readonly byte[] VFilterReplacement = { 0x04, 0x04, 0x10, 0x10, 0x10, 0x04, 0x04 };

    public static void ProcessFile(string inputFilePath, string outputFilePath, bool applyDeflicker, bool applyDithering, bool applyVFilter)
    {
        if (string.IsNullOrEmpty(inputFilePath))
        {
            Logger.Log($"Invalid input file path: {nameof(inputFilePath)}");
            throw new ArgumentException("Invalid input file path", nameof(inputFilePath));
        }

        if (string.IsNullOrEmpty(outputFilePath))
        {
            Logger.Log($"Invalid input file path: {nameof(outputFilePath)}");
            throw new ArgumentException("Invalid output file path", nameof(outputFilePath));
        }

        byte[] fileBuffer = File.ReadAllBytes(inputFilePath);

        if (applyDeflicker)
            ApplyDeflickerPatch(fileBuffer);

        if (applyDithering)
            ApplyDitheringPatch(fileBuffer);

        if (applyVFilter)
            ApplyVFilterPatch(fileBuffer);

        File.WriteAllBytes(outputFilePath, fileBuffer);
    }

    private static void ApplyDeflickerPatch(byte[] buffer)
    {
        int deflickerPatternLength = DeflickerPattern.Length;  // This is 252 bytes
        int replacementLength = DeflickerReplacement.Length;   // This is 4 bytes

        for (int i = 0; i <= buffer.Length - deflickerPatternLength; i++)
            if (IsMatch(buffer, i, DeflickerPattern))
            {
                int replacePosition = i + deflickerPatternLength - replacementLength;

                // Replace the last 4 bytes of the matched pattern
                Array.Copy(DeflickerReplacement, 0, buffer, replacePosition, replacementLength);

                break; // Stop after the first match
            }
    }


    private static void ApplyDitheringPatch(byte[] buffer)
    {
        for (int i = 8; i <= buffer.Length - DitheringPattern.Length; i++)
            if (IsMatch(buffer, i, DitheringPattern))
            {
                // Replace the 4 bytes preceding the pattern
                Array.Copy(DitheringReplacement, 0, buffer, i - 4, DitheringReplacement.Length);

                break;
            }
    }

    private static void ApplyVFilterPatch(byte[] buffer)
    {
        for (int i = 0; i <= buffer.Length - VFilterPattern.Length; i++)
            if (IsMatch(buffer, i, VFilterPattern))
            {
                // Replace the pattern directly
                Array.Copy(VFilterReplacement, 0, buffer, i, VFilterReplacement.Length);
            }
    }

    private static bool IsMatch(byte[] buffer, int position, byte[] pattern)
    {
        for (int i = 0; i < pattern.Length; i++)
            if (buffer[position + i] != pattern[i])
                return false;
        return true;
    }
    // This is dev code to quickly check to see how the applying went.
    public static bool AreFilesDifferent(string filePath1, string filePath2)
    {
        byte[] file1 = File.ReadAllBytes(filePath1);
        byte[] file2 = File.ReadAllBytes(filePath2);

        if (file1.Length != file2.Length)
            return true;

        for (int i = 0; i < file1.Length; i++)
            if (file1[i] != file2[i])
            {
                MessageBox.Show($"Files are different starting at byte position: {i}");
                MessageBox.Show($"Original Byte: {file1[i]:X2}");
                MessageBox.Show($"Modified Byte: {file2[i]:X2}");
                return true;
            }

        return false;
    }
}
